/*
_______________________________________________________________________________________________________________
	Description: 	This macro counts percent of spots on eggs from multispectral 
			images (.mspec). It works together with the micaToolbox software by:
			Troscianko, J. & Stevens, M. (2015) Methods in Ecology & Evolution
			6(11), 1320-1331.

	Author: Klaudia Szala
	Date: 2021-02-13

	UPDATES:

	2023-10-16: 	I added a possiblity to select visual model. This way spots are extracted from
			avian double cones channel. If no visual model is selected, camera's green channel
			is used.

	2023-10-24: 	1) Now a table with temporary results is saved in folder with images.
			2) I added a step with Gaussian blur to remove uneven illumination of eggs 
			(darkening of the edges) following Gomez et al. (2018) Behav. Ecol. Sociobiol. 72: 142.
			As it turned out it also improves detection of paler spots.
			3) I discarded enhancing contrast option.

	2023-10-25: 	1) I changed the condition to check if ROI's name starts with "egg" to omit all ROIs
			that are not eggs, not only scale bar.

	2023-10-30:	1) I added a possibility to customise scale of Gaussian blur and of selection shrinking.

	2023-11-09:	1) Table with results is saved as csv instead of xls.
			2) Small jpg files with detected spots are now saved if this option is selected.

	2023-11-19	1) The script works with both visible and UV light (with normalised images and with
			images converted to tri- or tetrachromatic visual models).

_________________________________________________________________________________________________________________
*/

imageDIR = getDirectory("Select folder containing multispectral images");
fileList=getFileList(imageDIR);
mspecList=newArray();

for(i=0; i<fileList.length; i++) // list only mspec files
	if(endsWith(fileList[i], ".mspec")==1)
		mspecList = Array.concat(mspecList, fileList[i]); 

// LISTING CONE CATCH MODELS

	modelPath = getDirectory("plugins")+"Cone Models";

	modelList=getFileList(modelPath);

	modelNames = newArray("None");

	for(i=0; i<modelList.length; i++){
		if(endsWith(modelList[i], ".class")==1 && modelList[i] != "Human_Luminance_32bit.class")
			modelNames = Array.concat(modelNames,replace(modelList[i],".class",""));
		if(endsWith(modelList[i], ".CLASS")==1 && modelList[i] != "Human_Luminance_32bit.class")
			modelNames = Array.concat(modelNames,replace(modelList[i],".CLASS",""));
	}

	for(i=0; i<modelNames.length; i++)
		modelNames[i] = replace(modelNames[i], "_", " ");


// IMAGE PROCESSING SETTINGS

	Dialog.create("Image processing settings");
		Dialog.addMessage("This tool calculates percent of spots using either double cones channel for a selected visual system or a camera's green channel.");

		Dialog.addMessage("Select the visual system to use:");
		Dialog.addChoice("Model", modelNames);

		Dialog.addMessage("For pattern analyses all images should be scaled uniformly. \nIf you don't know minimum px/mm value in your set of photo first use Scale Bar Calculator in MICA Toolbox.");
		Dialog.addNumber("Scale images (px/mm)", 0); // first use scale bar calculator to calculate minimum px/mm in the folder of photos
		
		Dialog.addNumber("Enter the radius value for thresholding:", 50);
		Dialog.addNumber("Scale of Gaussian blur:", 128);
		Dialog.addNumber("Shrink selection (% of an egg's width):", 5);
		Dialog.addCheckbox("Turn on batch mode", 1);
		Dialog.addCheckbox("Save images of eggs with detected spots", 0);		
	Dialog.show();

	visualSystem = Dialog.getChoice();
	scaleVal = Dialog.getNumber();
	R = Dialog.getNumber();
	GaussianBlur = Dialog.getNumber();
	shrinking = Dialog.getNumber();
	batch = Dialog.getCheckbox();
	imagesSpots = Dialog.getCheckbox();

	if (imagesSpots == 1) {
	imagesSpots_output = getDirectory("Select folder where images of eggs with detected spots will be saved.");
	}
	
	run("Clear Results");
	dataFilePath = imageDIR +"TEMP_results_percentSpots_"+ visualSystem + ".csv";

// PREPARE TABLE FOR SAVING RESULTS

	table_name = "Table";

	table_cols = newArray("Label", "area", "background", "spots", "percent_spots");

	newTable(table_name, table_cols);

	function newTable(table_name, table_cols) {
		Table.create(table_name);
		for (i=0; i<table_cols.length; i++) {
			selectWindow(table_name);
			Table.set(table_cols[i], 0, 0);
		}
		Table.deleteRows(0, 0, table_name);
	}


//BATCH PROCESSING LOOP FOR PHOTOS

for(i=0; i<mspecList.length; i++){

	print("\\Update3:Processing Image " + (i+1) + " of " + mspecList.length);
	
	imageString = "select=[" + imageDIR + mspecList[i] + "]";
	run("Create Stack from Config File", imageString);
	run("Normalise & Align Multispectral Stack", "normalise curve=[Straight Line] align");
	
//SCALING IMAGE

	if(scaleVal>0){

		imageString= "pixels=" + scaleVal;
		run("Multispectral Image Scaler", imageString);
	}
	
	nameNormalised = getTitle();	
		
// CONVERT TO CONE CATCH
	
	if(visualSystem != "None"){
		
		run(visualSystem);
		setMinAndMax(0, 1);
		rename(nameNormalised + " " + visualSystem);
		nameCone = getTitle();
		selectImage(nameNormalised);
		close(); // close original image
		nChannels = nSlices;
			
	} // close if for cone catch model
	

//BATCH PROCESSING LOOP FOR ROIs

	for (u=0; u<roiManager("count"); u++) {
   
		roiManager("Select", u);
		tStr = getInfo("selection.name");
		if(startsWith(tStr, "egg") == true){ //measure only eggs
		
		if(visualSystem != "None"){

			setSlice(nChannels); // for visual model set dbl channel - it's always the last one

		 } else {

			setSlice(2); // for images not converted to visual model set green channel
		
		} // if condition for visual model

	if(batch == 1){
			setBatchMode(true);
		} else {
			setBatchMode(false);
		} //close if condition for batch mode
		
		run("Duplicate...", "title=egg");
		run("8-bit");
		w = getWidth();
		h = getHeight();
		imageDimension = w*h;
		shrinkingValue = w*shrinking*(-0.01); //for shrinking of the selection later
		
		setBackgroundColor(0, 0, 0);
		run("Clear Outside");
				
		run("Duplicate...", "title=egg_Gaussian");
		run("Gaussian Blur...", "sigma=GaussianBlur");

		imageCalculator("Subtract", "egg","egg_Gaussian");
		
		selectWindow("egg_Gaussian");
		close();

		selectWindow("egg");
		   				

	//SPOTS DETECTION

		run("Auto Local Threshold", "method=Phansalkar radius=R parameter_1=0 parameter_2=0 white");
		run("Enlarge...", "enlarge=shrinkingValue"); // shrink selection to remove background that is treated as spots
		setBackgroundColor(0, 0, 0);
		run("Clear Outside");

		run("Set Measurements...", "area display redirect=None decimal=3");
		run("Measure"); //measure area of egg
		n = nResults;
		row_number = n-1;

		run("Make Inverse");
		run("Add...", "value=255"); // make background around the egg white -> now only spots are black
		run("Select None");

	// MEASURING SPOTTINESS
		
		getHistogram(values, counts, 2);
		spots = counts[0];
		whiteWithBg = counts[1];
		surface = getResult("Area", row_number);
		
		bgPixels = imageDimension-surface; // white pixels around egg
		white = whiteWithBg-bgPixels; //unspotted area of egg
		spottiness = (spots / surface)*100;

	// SAVING RESULTS OF ROI ITERATION

		selectWindow("Table");
		table_row = Table.size();
		Table.set("Label", table_row, nameNormalised +": "+ tStr);
		Table.set("area", table_row, surface);
		Table.set("background", table_row, white);
		Table.set("spots", table_row, spots);
		Table.set("percent_spots", table_row, spottiness);
		
		saveAs("Table", imageDIR + "Results_percentSpots_temp" + ".csv"); // save temporary results
		Table.rename("Results_percentSpots_temp.csv", "Table");

	// SAVING IMAGES WITH DETECTED SPOTS

		if (imagesSpots == 1) {
				
		selectWindow("egg");
		saveAs("Jpeg", imagesSpots_output + nameNormalised +"_"+ tStr + ".jpg");
		
		}

   		selectWindow("egg");
		close();
				
		} //close condition for ROI's name
		
	} //close loop for ROIs

Table.update();

if(visualSystem != "None"){ // close image
	selectWindow(nameCone);
	close();
} else {
	selectWindow(nameNormalised);
	close();
}

} //close loop for photos

selectWindow("ROI Manager");
run("Close");
selectWindow("Results");
run("Close");

//SAVING RESULTS

Dialog.create("Information");
	Dialog.addMessage("Processing finished. Indicate folder, \nwhere results will be saved.");
Dialog.show();

results_output = getDirectory("Select folder where results will be saved");

Dialog.create("Question");
	Dialog.addMessage("How to name the file with results?");
	Dialog.addString("Enter the name:", "results");
Dialog.show();

results_name = Dialog.getString();

selectWindow("Table");
saveAs("Table", results_output + results_name + ".csv");
close("Table");

Dialog.create("Information");
	Dialog.addMessage("Results saved in: " + results_output + results_name + ".csv");
Dialog.show();

print("\\Update3:Processing finished ");
print("Results saved in: " + results_output);
